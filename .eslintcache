[{"/Users/emillacinov/Documents/GitHub/TodoApp/src/index.js":"1","/Users/emillacinov/Documents/GitHub/TodoApp/src/components/App/App.js":"2","/Users/emillacinov/Documents/GitHub/TodoApp/src/components/About/About.js":"3","/Users/emillacinov/Documents/GitHub/TodoApp/src/components/ToDo/ToDo.js":"4","/Users/emillacinov/Documents/GitHub/TodoApp/src/components/InputItem/InputItem.js":"5","/Users/emillacinov/Documents/GitHub/TodoApp/src/components/ItemList/ItemList.js":"6","/Users/emillacinov/Documents/GitHub/TodoApp/src/components/Item/Item.js":"7"},{"size":165,"mtime":1635190811514,"results":"8","hashOfConfig":"9"},{"size":796,"mtime":1635714199437,"results":"10","hashOfConfig":"9"},{"size":7612,"mtime":1635709939614,"results":"11","hashOfConfig":"9"},{"size":4940,"mtime":1635711617127,"results":"12","hashOfConfig":"9"},{"size":1543,"mtime":1635710551255,"results":"13","hashOfConfig":"9"},{"size":845,"mtime":1635714199437,"results":"14","hashOfConfig":"9"},{"size":1456,"mtime":1635714199437,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"uymw68",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/emillacinov/Documents/GitHub/TodoApp/src/index.js",[],["32","33"],"/Users/emillacinov/Documents/GitHub/TodoApp/src/components/App/App.js",[],"/Users/emillacinov/Documents/GitHub/TodoApp/src/components/About/About.js",[],"/Users/emillacinov/Documents/GitHub/TodoApp/src/components/ToDo/ToDo.js",["34","35"],"import React, { useEffect, useState } from 'react';\nimport InputItem from \"../InputItem/InputItem\";\nimport ItemList from \"../ItemList/ItemList\";\nimport Button from '@material-ui/core/Button';\nimport styles from './ToDo.module.css';\nimport classnames from 'classnames';\nimport errorImg from './img/error.svg';\n\nconst ToDo = () => {\n  const initialState = {\n    Items: [\n    ],\n    filter: 'all',\n    filteredItems: [],\n    count: 0,\n    countActive: 0,\n    countDone: 0,\n    lastID: 0,\n    selectedId: -1\n  };\n\n  const [Items, setItems] = useState(initialState.Items);\n  const [filteredItems, setFilteredItems] = useState(initialState.filteredItems);\n  const [filter, setFilter] = useState(initialState.filter);\n  const [count, setCount] = useState(initialState.count);\n  const [lastID, setLastId] = useState(initialState.lastID);\n  const [countActive, setCountActive] = useState(initialState.countActive);\n  const [countDone, setCountDone] = useState(initialState.countDone);\n  const [selectedId, setSelectedId] = useState(initialState.selectedId);\n\n  useEffect(() => {\n    setFilteredItems(Items);\n  }, []);\n\n  useEffect(() => {\n    onClickFilter(filter);\n\n  }, [Items]);\n\n  useEffect(() => {\n    onClickSelected(-1);\n  }, [filter]);\n\n  const onClickDone = id => {\n    const newItemList = Items.map(item => {\n      const newItem = { ...item };\n\n      if (item.id === id) {\n        newItem.isDone = !item.isDone;\n      }\n      return newItem;\n    });\n\n    const newCountDone = newItemList.filter(item => item.isDone);\n    const newCountActive = newItemList.filter(item => !item.isDone);\n\n    setItems(newItemList);\n    setCountDone(newCountDone.length);\n    setCountActive(newCountActive.length)\n  };\n\n  const onClickDelete = id => {\n    const newItemList = Items.filter(item => item.id !== id);\n    const newCountDone = newItemList.filter(item => item.isDone);\n    const newCountActive = newItemList.filter(item => !item.isDone);\n\n    setItems(newItemList);\n    setCount((count) => count - 1);\n    setCountDone(newCountDone.length);\n    setCountActive(newCountActive.length);\n  };\n\n  const onClickSelected = id => setSelectedId(id);\n\n  const onClickAdd = (value) => {\n    const newItemList = [\n      ...Items,\n      {\n        value,\n        isDone: false,\n        id: lastID + 1\n      }\n    ];\n\n    setItems(newItemList);\n    setCount((count) => count + 1);\n    setLastId((lastID) => lastID +1);\n    setCountActive((countActive) => countActive + 1);\n  };\n\n  const onClickFilter = filter => {\n    let  newItemList = [];\n    switch (filter) {\n      case 'all':\n        newItemList = Items;\n        break;\n      case 'active':\n        newItemList = Items.filter (item => !item.isDone);\n        break;\n      case 'finished':\n        newItemList = Items.filter (item => item.isDone);\n        break;\n      default:\n        newItemList = Items;\n    }\n\n    setFilteredItems(newItemList);\n    setFilter(filter);\n  };\n\n  return (\n    <div className={styles.wrap}>\n      <h1 className={styles.title}>Important things:</h1>\n      <div className={styles.wrapList}>\n\n        <InputItem onClickAdd={onClickAdd} Items={Items} className={styles.inputItem}/>\n\n        {Items.length > 0 ?\n        <ItemList\n          Items={filteredItems}\n          onClickDone={onClickDone}\n          onClickDelete={onClickDelete}\n          onClickSelected={onClickSelected}\n          selectedId={selectedId}\n          className={styles.itemList}\n        /> :\n\n        <div className={styles.TodoErrorWrap}>\n          <img src={errorImg} alt='error loading' className={styles.TodoErrorImg}></img>\n            <h2 className={styles.TodoErrorTitle}>You haven't added any task</h2>\n            <p className={styles.TodoErrorText}>Do it</p>\n        </div>}\n\n      </div>\n\n      <div className={styles.wrapFooter}>\n        <div className={styles.wrapFilter}>\n          <Button className={classnames({ [styles.todoCount]: true, [styles.todoCountActive]: filter === 'all' })} onClick={() => onClickFilter('all')} >\n            All\n            <span className={classnames({ [styles.todoCountNumber]: true, [styles.todoCountNumberActive]: filter === 'all' })}>&nbsp; {count}</span>\n          </Button>\n          <Button className={classnames({ [styles.todoCount]: true, [styles.todoCountActive]: filter === 'active' })} onClick={() => onClickFilter('active')}>\n            Active\n            <span className={classnames({ [styles.todoCountNumber]: true, [styles.todoCountNumberActive]: filter === 'active' })}>&nbsp; {countActive}</span>\n          </Button>\n          <Button className={classnames({ [styles.todoCount]: true, [styles.todoCountActive]: filter === 'finished' })} onClick={() => onClickFilter('finished')}>\n            Done\n            <span className={classnames({ [styles.todoCountNumber]: true, [styles.todoCountNumberActive]: filter === 'finished' })}>&nbsp; {countDone}</span>\n          </Button>\n        </div>\n      </div>\n\n    </div>);\n};\n\nexport default ToDo;\n","/Users/emillacinov/Documents/GitHub/TodoApp/src/components/InputItem/InputItem.js",[],"/Users/emillacinov/Documents/GitHub/TodoApp/src/components/ItemList/ItemList.js",[],"/Users/emillacinov/Documents/GitHub/TodoApp/src/components/Item/Item.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":33,"column":6,"nodeType":"42","endLine":33,"endColumn":8,"suggestions":"43"},{"ruleId":"40","severity":1,"message":"44","line":38,"column":6,"nodeType":"42","endLine":38,"endColumn":13,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Items'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredItems' needs the current value of 'Items'.","ArrayExpression",["48"],"React Hook useEffect has missing dependencies: 'filter' and 'onClickFilter'. Either include them or remove the dependency array.",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},"Update the dependencies array to be: [Items]",{"range":"54","text":"55"},"Update the dependencies array to be: [Items, filter, onClickFilter]",{"range":"56","text":"57"},[1104,1106],"[Items]",[1163,1170],"[Items, filter, onClickFilter]"]